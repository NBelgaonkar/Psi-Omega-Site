import React, { useState, useRef, useEffect } from 'react';
import { Avatar, Box, IconButton, Paper, Typography } from '@mui/material';
import ChatBubbleOutlineIcon from '@mui/icons-material/ChatBubbleOutline';
import CloseIcon from '@mui/icons-material/Close';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import PersonIcon from '@mui/icons-material/Person';
import SendIcon from '@mui/icons-material/Send';


export const Chatbot = () => {
  const [messages, setMessages] = useState([
    {
      role: 'assistant',
      content: 'Welcome to Engraving4All! How can I help you today?',
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    },
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleToggleChat = () => {
    setIsChatOpen(!isChatOpen);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = {
      role: 'user',
      content: input.trim(),
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const systemMessage = {
        role: 'system',
        content: 
        `Refer to the following instructions to create your responses:

        [Context]
        You are a knowledgeable and friendly chat assistant for the Delta Kappa Epsilon Psi Omega Chapter at Rensselaer Polytechnic Institute. 
        Your purpose is to provide information about the fraternity, its history, values, culture, and membership process. Respond to users' questions warmly and clearly,
        offering detailed and accurate answers. Always reflect the fraternity's commitment to community, scholarship, and leadership.

        [Task or Request]
        Refer to the knowledge base to help users navigate the website and answer any questions they have as well as enhance their experience while using the website.

        [Knowledge base]
        1. Introduction to DKE Psi Omega Chapter
        Highlight its history, founding principles, and relationship to RPI.
        Example: "Delta Kappa Epsilon, Psi Omega Chapter, is a fraternity at RPI with a rich history of brotherhood and excellence. We are part of an international organization founded in 1844, committed to cultivating leadership, academic success, and lifelong connections."
        2. What is a Fraternity?
        Define the concept for users unfamiliar with it.
        Example: "A fraternity is a community of individuals united by shared values and goals. Members support one another in academics, personal growth, and professional aspirations while participating in social, philanthropic, and leadership activities."
        3. Membership Requirements
        Provide details on eligibility and application processes.
        Example: "To join DKE Psi Omega, you must be an undergraduate student at RPI. We value individuals who demonstrate leadership, a commitment to community service, and a desire for personal growth. Our recruitment process includes attending events and interviews to ensure mutual alignment."
        4. Culture and Values
        Discuss what makes the chapter unique, emphasizing community and support.
        Example: "Our chapter prides itself on fostering a supportive environment where members can thrive academically and socially. We value integrity, honor, and respect, with a focus on leadership and giving back to our community."
        5. Events and Activities
        Share examples of philanthropy, social events, and professional development activities.
        Example: "From volunteering at local shelters to hosting career-building workshops, our chapter offers diverse opportunities for engagement. Social events, like formal dances and alumni networking, create memorable experiences."
        6. Frequently Asked Questions
        Address common queries such as:
        What is the time commitment?
        Are there financial obligations?
        How can I learn more about the chapter?
        Example: "Joining a fraternity is a commitment, but our members manage it alongside academics and other responsibilities. We also offer scholarships and financial aid for those concerned about membership costs."
        [Output Format]
        Keep your responses short and concise, max of 2-3 sentences.`,
      };

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer `, 
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [systemMessage, ...messages, userMessage].map(({ role, content }) => ({ role, content })),
        }),
      });

      const data = await response.json();

      setMessages((prev) => [
        ...prev,
        {
          role: 'assistant',
          content: data.choices[0].message.content,
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        },
      ]);
    } catch (error) {
      console.error('Error:', error);
      setMessages((prev) => [
        ...prev,
        {
          role: 'assistant',
          content: 'Sorry, there was an error. Please try again.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <IconButton
        onClick={handleToggleChat}
        sx={{
          position: 'fixed',
          bottom: 20,
          right: 20,
          width: 48,
          height: 48,
          backgroundColor: '#d68c22',
          color: '#fff',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.2)',
          '&:hover': {
            backgroundColor: '#e69a3a',
          },
        }}
      >
        {isChatOpen ? <CloseIcon fontSize="small" /> : <ChatBubbleOutlineIcon fontSize="small" />}
      </IconButton>

      {isChatOpen && (
        <Paper
          elevation={4}
          sx={{
            position: 'fixed',
            bottom: 90,
            right: 40,
            width: 460,
            height: 600,
            display: 'flex',
            flexDirection: 'column',
            borderRadius: 8,
            overflow: 'hidden',
          }}
        >
          <Box sx={{ padding: 1, backgroundColor: '#d68c22', color: '#fff', textAlign: 'center' }}>
            <Typography variant="subtitle1" fontWeight="bold" fontFamily="'Segoe UI', sans-serif">
              Contact Us
            </Typography>
            <Typography variant="caption" fontFamily="'Segoe UI', sans-serif">
              We'll respond as soon as we can.
            </Typography>
            <IconButton
              onClick={handleToggleChat}
              sx={{
                position: 'absolute',
                top: 4,
                right: 4,
                color: '#fff',
                padding: '9px',
                fontSize: '50rem',
              }}
            >
              <ExpandMoreIcon fontSize="medium" />
            </IconButton>
          </Box>

          <Box sx={{ flex: 1, padding: 1, overflowY: 'auto', backgroundColor: '#f9f9f9' }}>
            {messages.map((message, index) => (
              <Box
                key={index}
                sx={{
                  display: 'flex',
                  flexDirection: message.role === 'user' ? 'row-reverse' : 'row',
                  alignItems: 'flex-start',
                  marginBottom: 1,
                  gap: 1,
                }}
              >
                {message.role === 'assistant' && (
                  <Avatar sx={{ bgcolor: '#9c27b0', color: '#fff', width: 32, height: 32, marginTop: '16px' }}>
                    <PersonIcon fontSize="small" />
                  </Avatar>
                )}
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: message.role === 'user' ? 'flex-end' : 'flex-start' }}>
                  <Box
                    sx={{
                      display: 'inline-block',
                      padding: '12px 16px',
                      borderRadius: 8,
                      backgroundColor: message.role === 'user' ? '#d68c22' : '#FAF9EC',
                      color: message.role === 'user' ? '#fff' : '#444',
                      wordBreak: 'break-word',
                      overflowWrap: 'break-word',
                      minWidth: '12px',
                      maxWidth: '100%',
                      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.2)',
                      textShadow: '0 1px 1px rgba(0, 0, 0, 0.1)',
                      marginTop: '16px',
                    }}
                  >
                    <Typography
                      sx={{
                        fontSize: '0.85rem',
                        fontFamily: "'Segoe UI', sans-serif",
                        lineHeight: 1.5,
                        textAlign: 'left',
                      }}
                    >
                      {message.content}
                    </Typography>
                  </Box>
                  <Typography
                    variant="caption"
                    sx={{
                      color: '#888',
                      fontSize: '0.75rem',
                      textAlign: message.role === 'user' ? 'right' : 'left',
                      marginTop: '4px',
                    }}
                  >
                    {message.role === 'assistant' ? `Engraving4All Â· ${message.timestamp}` : message.timestamp}
                  </Typography>
                </Box>
              </Box>
            ))}
            <div ref={messagesEndRef} />
          </Box>

          <Box component="form" onSubmit={handleSubmit} sx={{ padding: 1, borderTop: '1px solid #ddd', display: 'flex', alignItems: 'center' }}>
            <input
              type="text"
              placeholder="Enter your question or message here"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              style={{
                flex: 1,
                border: 'none',
                outline: 'none',
                fontSize: '0.85rem',
                fontFamily: "'Segoe UI', sans-serif",
                padding: '8px',
                color: '#444',
                backgroundColor: 'transparent',
              }}
            />
            <IconButton type="submit" sx={{ color: '#d68c22' }} disabled={isLoading}>
              <SendIcon fontSize="small" />
            </IconButton>
          </Box>
        </Paper>
      )}
    </>
  );
};
